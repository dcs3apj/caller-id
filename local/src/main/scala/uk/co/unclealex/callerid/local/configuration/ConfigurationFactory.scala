/**
 * Copyright 2013 Alex Jones
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 * @author unclealex72
 *
 */

package uk.co.unclealex.callerid.local.configuration

import java.net.URL
import scala.reflect.ClassTag
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.scala.DefaultScalaModule
import com.fasterxml.jackson.databind.DeserializationFeature
import scala.io.Source
import scalax.io.Resource
import java.io.Closeable
import java.io.Reader
import scalax.io.JavaConverters._

/**
 * An object that can be used to load configuration classes from JSON resources.
 * @author alex
 *
 */
class ConfigurationFactory(
  /**
   * The source url for all configuration classes generated by this instance.
   */
  configurationUrl: URL) {

  val mapper =
    new ObjectMapper().
      registerModule(DefaultScalaModule).
      configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)

  /**
   * Load a configuration class.
   */
  def apply[A](implicit a: ClassTag[A]): A = {
    val reader = mapper.reader(a.runtimeClass)
    Resource.fromURL(configurationUrl).acquireAndGet(is => reader.readValue[A](is))
  }
}